

@booklet{nistsp800ui,
    author = {Ramaswamy Chandramouli},
    title = {Implementation of DevSecOps for Microservice-based Application with Service Mesh},
    year = {2022},
    howpublished = {NIST Special Publication 800-204C},
    doi = {10.6028/NIST.SP.800-204C},
    urldate= {2024-05-18}
}

@online{atwoodmd,
    author = {Jeff Atwood},
    title = {The Future of Markdown},
    howpublished = "CodingHorror",
    year = {2012},
    url = {https://blog.codinghorror.com/the-future-of-markdown/},
    urldate= {2024-05-20}
}

%online{dmit19ui,
%    organization = {Demeter ICT} ,
%    title = {UX / UI คืออะไร},
%    year = {2019},
%    url = {https://www.dmit.co.th/th/ข่าวสาร/ux-vs-ui/},
%    urldate = {2023-05-17}
%}

@book{meyer2000,
    added-at = {2010-12-04T15:26:07.000+0100},
    author = {Meyer, B.},
    biburl = {https://www.bibsonomy.org/bibtex/25d90953042c60c825aed52800651a274/jimbarritt},
    citeulike-article-id = {159168},
    citeulike-linkout-0 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20&amp;path=ASIN/0136291554},
    citeulike-linkout-1 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21&amp;path=ASIN/0136291554},
    citeulike-linkout-2 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21&amp;path=ASIN/0136291554},
    citeulike-linkout-3 = {http://www.amazon.jp/exec/obidos/ASIN/0136291554},
    citeulike-linkout-4 = {http://www.amazon.co.uk/exec/obidos/ASIN/0136291554/citeulike00-21},
    citeulike-linkout-5 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=ASIN/0136291554},
    citeulike-linkout-6 = {http://www.worldcat.org/isbn/0136291554},
    citeulike-linkout-7 = {http://books.google.com/books?vid=ISBN0136291554},
    citeulike-linkout-8 = {http://www.amazon.com/gp/search?keywords=0136291554&index=books&linkCode=qs},
    citeulike-linkout-9 = {http://www.librarything.com/isbn/0136291554},
    day = 21,
    edition = {2nd},
    howpublished = {Paperback},
    interhash = {2f3a02abc2f2a12dafcdf0b3a488d3ee},
    intrahash = {5d90953042c60c825aed52800651a274},
    isbn = {0136291554},
    keywords = {design encapsulation},
    posted-at = {2010-10-30 15:01:18},
    priority = {2},
    publisher = {Prentice Hall PTR},
    timestamp = {2010-12-04T15:36:37.000+0100},
    title = {{Object-Oriented Software Construction}},
    url = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=ASIN/0136291554},
    year = {2000},
    doi = {10.5555/261119},
    urldate = {2023-09-05}
}

@book{booch87,
    author = {Booch, G.},
    title = {Software Engineering with ADA},
    year = {1986},
    isbn = {080530603X},
    publisher = {Benjamin-Cummings Publishing},
    address = {Menlo Park, CA, USA},
    edition = {2nd},
    abstract = {From the Publisher:Grady Booch, a renowned authority in software development, and Doug Bryan combined their Ada programming and software engineering expertise for the new edition of this best-selling book. Their up-to-date introduction to Ada programming provides a foundation for using the language with software engineering and object-oriented design. Programmers will find Software Engineering with Ada, Third Edition to be a complete reference for creating large-scale Ada systems and understanding the software engineering aspects of these systems. Features of the third edition include techniques for combining object-oriented design principles and software engineering to maximize the potential of Ada; extensive examples of small-sized code that will benefit new Ada programmers; six chapters devoted to design; five new large-scale programming exercises that build upon the software engineering principles developed in the design chapters; design projects on topics such as environment monitoring, database systems, and generic tree packages; an introduction to up-to-date object-oriented design methodology; and a new appendix on the Ada 9X program.},
    doi = {10.1017/S0263574700005191},
    urldate = {2023-09-07}
}

@book{dijkstra82,
    added-at = {2006-11-20T17:10:05.000+0100},
    address = {Secaucus, NJ, USA},
    author = {Dijkstra, E. W.},
    biburl = {https://www.bibsonomy.org/bibtex/2ee282ad09e55a49c8ce9a79ebbd05ff0/mstrohm},
    description = {Selected Writings on Computing},
    interhash = {5f2bfc3f1f1cee7cec49d7289554d198},
    intrahash = {ee282ad09e55a49c8ce9a79ebbd05ff0},
    isbn = {0387906525},
    keywords = {books epistemology},
    publisher = {Springer-Verlag New York, Inc.},
    timestamp = {2007-05-15T18:12:41.000+0200},
    title = {Selected Writings on Computing: A Personal Perspective},
    doi = {10.5555/539053},
    year = {1982},
    urldate = {2023-09-05}
}

@online{wikipedia04soc,
    year = {2003},
    url = {https://en.wikipedia.org/w/index.php?title=Separation_of_concerns&oldid=1175571613},
    urldate = {2023-09-05},
    organization = {Wikipedia},
    title = {Separation of concerns}
}

@book{thomas99pragmatic,
    added-at = {2013-11-29T20:55:50.000+0100},
    address = {Boston [etc.]},
    author = {Hunt, A. and Thomas, D.},
    biburl = {https://www.bibsonomy.org/bibtex/2f089d7f6f61cad0258c08477d2f920a7/admogar},
    description = {The Pragmatic Programmer: From Journeyman to Master: Andrew Hunt, David Thomas: 9780201616224: Amazon.com: Books},
    interhash = {e614934d54a2ffbddf23a42d0dc729ff},
    intrahash = {f089d7f6f61cad0258c08477d2f920a7},
    isbn = {020161622X 9780201616224},
    keywords = {programming software},
    publisher = {Addison-Wesley},
    refid = {806497391},
    timestamp = {2013-12-02T09:48:03.000+0100},
    title = {The Pragmatic Programmer: from Journeyman to Master},
    url = {http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X},
    year = {2000},
    urldate = {2023-09-06}
}

@book{fowler13oop,
    abstract = {{Your class library works, but could it be better? \_Refactoring: Improving the
    Design of Existing Code\_ shows how refactoring can make object-oriented code
    simpler and easier to maintain. Today, refactoring requires considerable
    design know-how, but once tools become available, all programmers should be
    able to improve their code using refactoring techniques.
    
    Besides an introduction to what refactoring is, this handbook provides a
    catalogue of dozens of tips for improving code. The best thing about
    \_Refactoring\_ is its remarkably clear presentation, along with excellent nuts-
    and-bolts advice, from object expert Martin Fowler. The author is also an
    authority on software patterns and UML, and this experience helps make this a
    better book, one that should be immediately accessible to any intermediate or
    advanced object-oriented developer. (Just like patterns, each refactoring tip
    is presented with a simple name, a "motivation," and examples using Java and
    UML.)
    
    Early chapters stress the importance of testing in successful refactoring.
    (When you improve code, you have to test to verify that it still works.) After
    the discussion on how to detect the "smells" of bad code, readers get to the
    heart of the book, its catalogue of more than 70 "refactorings"--tips for
    better and simpler class design. Each tip is illustrated with "before" and
    "after" code, along with an explanation. Later chapters provide a quick look
    at refactoring research.
    
    Like software patterns, refactoring may be an idea whose time has come. This
    groundbreaking title will surely help bring refactoring to the programming
    mainstream. With its clear advice on a hot new topic, \_Refactoring\_ is sure to
    be essential reading for anyone who writes or maintains object- oriented
    software. --\_Richard Dragan\_
    
    **Topics Covered:** Refactoring, improving software code, redesign, design
    tips, patterns, unit testing, refactoring research and tools.}},
    added-at = {2019-03-01T00:11:50.000+0100},
    author = {Fowler, M. and Beck, K.},
    biburl = {https://www.bibsonomy.org/bibtex/298bd693ce7fa272678e1ed8ca4a860eb/gdmcbain},
    citeulike-article-id = {251681},
    citeulike-linkout-0 = {http://martinfowler.com/books/refactoring.html},
    citeulike-linkout-1 = {http://www.informit.com/store/refactoring-improving-the-design-of-existing-code-9780201485677?ranMID=24808},
    citeulike-linkout-10 = {http://www.amazon.com/gp/search?keywords=0201485672\&index=books\&linkCode=qs},
    citeulike-linkout-11 = {http://www.librarything.com/isbn/0201485672},
    citeulike-linkout-12 = {http://www.worldcat.org/oclc/863697997},
    citeulike-linkout-2 = {http://www.amazon.ca/exec/obidos/redirect?tag=citeulike09-20\&amp;path=ASIN/0201485672},
    citeulike-linkout-3 = {http://www.amazon.de/exec/obidos/redirect?tag=citeulike01-21\&amp;path=ASIN/0201485672},
    citeulike-linkout-4 = {http://www.amazon.fr/exec/obidos/redirect?tag=citeulike06-21\&amp;path=ASIN/0201485672},
    citeulike-linkout-5 = {http://www.amazon.jp/exec/obidos/ASIN/0201485672},
    citeulike-linkout-6 = {http://www.amazon.co.uk/exec/obidos/ASIN/0201485672/citeulike00-21},
    citeulike-linkout-7 = {http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20\&path=ASIN/0201485672},
    citeulike-linkout-8 = {http://www.worldcat.org/isbn/0201485672},
    citeulike-linkout-9 = {http://books.google.com/books?vid=ISBN0201485672},
    comment = {Recommended in 'Coding by composing':https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch5.html\#functional-husbandry},
    day = 08,
    howpublished = {Hardcover},
    interhash = {95bb197dd1f15f326ba0fa4ae9c381aa},
    intrahash = {98bd693ce7fa272678e1ed8ca4a860eb},
    isbn = {0201485672},
    keywords = {68n01-software-general 68n19-other-programming-paradigms},
    month = jul,
    posted-at = {2017-09-06 06:03:32},
    priority = {2},
    publisher = {Addison-Wesley},
    timestamp = {2023-10-05T05:49:18.000+0200},
    title = {{Refactoring : Improving the Design of Existing Code}},
    url = {https://github.com/willykraisler/prueba/blob/master/M.Fowler%20et%20al%20-%20Refactoring%20-%20Improving%20the%20Design%20of%20Existing.pdf},
    year = 2013,
    urldate = {2023-10-05}
}

@online{sandholm17influx,
    author = {Thomas Sandholm} ,
    title = {InfluxDB: The Good, the Bad, and the Ugly},
    year = {2017},
    url = {https://medium.com/@thomas.sandholm/influxdb-the-good-the-bad-and-the-ugly-b409f8c370a3},
    urldate = {2024-03-28}
}

@book{chacon14,
    abstract = {Pro Git (Second Edition) is your fully-updated guide to Git and its usage in the modern world. Git has come a long way since it was first developed by Linus Torvalds for Linux kernel development. It has taken the open source world by storm since its inception in 2005, and this book teaches you how to use it like a pro.
    
    Effective and well-implemented version control is a necessity for successful web projects, whether large or small. With this book you’ll learn how to master the world of distributed version workflow, use the distributed features of Git to the full, and extend Git to meet your every need.
    
    Written by Git pros Scott Chacon and Ben Straub, Pro Git (Second Edition) builds on the hugely successful first edition, and is now fully updated for Git version 2.0, as well as including an indispensable chapter on GitHub. It’s the best book for all your Git needs.},
    added-at = {2020-08-31T02:50:52.000+0200},
    address = {New York},
    author = {Chacon, S. and Straub, B.},
    biburl = {https://www.bibsonomy.org/bibtex/25284e7383d350390ade65fa9220b5455/gbschenkel},
    doi = {10.1007/978-1-4842-0076-6},
    edition = {Second},
    interhash = {b7dee9977e7a95a8990592348e548383},
    intrahash = {5284e7383d350390ade65fa9220b5455},
    isbn = {9781484200766},
    keywords = {git version-control},
    language = {English},
    publisher = {Apress},
    timestamp = {2020-08-31T02:51:39.000+0200},
    title = {Pro Git},
    url = {https://git-scm.com/book/en/v2},
    year = {2014},
    urldate = {2023-09-10}
}

@unpublished{nattawat20pgs,
    author = {Nattwat Jamlongrad and Nitipoom  Unrrom and Pakapong Attawiboon},
    title = {PGS: Program Grading System},
    year = {2020},
    institution = {Computer Engineering Department, Faculty of Engineering, King Mongkut's University of Technology Thonburi},
    note = {unpublished}
}

@online{fowlerDI,
    author = {Martin Fowler},
    title = {Inversion of Control Containers and the Dependency Injection pattern},
    year = {2004},
    url = {https://web.archive.org/web/20230920224304/https://www.martinfowler.com/articles/injection.html},
    urldate = {2023-09-20}
}

@online{toanstackdi,
    author = {Trieu Toan},
    title = {Toan's Response in 'Should I use dependency injection?'},
    year = {2019},
    url = {https://web.archive.org/web/20231009014636/https://stackoverflow.com/questions/130794/what-is-dependency-injection/130862#130862},
    urldate = {2023-10-07}
}

@online{tiwaristackdi,
    author = {Ganesh Tiwari},
    title = {Tiwari's Response in 'Should I use dependency injection?'},
    year = {2011},
    url = {https://web.archive.org/web/20231009014636/https://stackoverflow.com/questions/130794/what-is-dependency-injection/6085922#6085922},
    urldate = {2023-10-07}
}

@online{fowlerCI,
    author = {Martin Fowler},
    title = {Continuous Integration},
    year = {2001},
    url = {https://web.archive.org/web/20230920093033/https://martinfowler.com/articles/continuousIntegration.html},
    urldate = {2023-09-20}
}

@book{freeman09,
    added-at = {2010-12-04T15:26:07.000+0100},
    author = {Steve Freeman and Nat Pryce},
    biburl = {https://www.bibsonomy.org/bibtex/20d46399d2ee12e723f75767e94605ccb/jimbarritt},
    citeulike-article-id = {8150394},
    citeulike-linkout-0 = {http://my.safaribooksonline.com/9780321574442},
    day = 12,
    interhash = {2204b60de89ceaf84791c93e92be0b20},
    intrahash = {0d46399d2ee12e723f75767e94605ccb},
    isbn = {978-0-321-50362-6},
    keywords = {design encapsulation},
    organization = {Pearson Education},
    posted-at = {2010-10-30 14:55:21},
    priority = {2},
    publisher = {Addison-Wesley Professional},
    timestamp = {2010-12-04T15:36:34.000+0100},
    title = {{Growing Object-Oriented Software, Guided by Tests}},
    url = {http://my.safaribooksonline.com/9780321574442},
    year = {2009},
    urldate = {2023-10-05}
}

@online{shore06,
    author = {Jame Shore} ,
    title = {Dependency Injection Demystified},
    year = {2006},
    url = {https://www.jamesshore.com/v2/blog/2006/dependency-injection-demystified},
    urldate = {2023-10-05}
}

@online{argodoc,
    organization = {Argo Project},
    title = {What Is Argo CD?},
    year = {2023},
    url = {https://web.archive.org/web/20220917211651/https://argo-cd.readthedocs.io/en/stable/},
    urldate = {2023-09-17}
}

@online{argodocsync,
    organization = {Argo Project},
    title = {Sync Applications with Kubectl},
    year = {2023},
    url = {https://web.archive.org/web/20230930135838/https://argo-cd.readthedocs.io/en/stable/user-guide/sync-kubectl},
    urldate = {2023-09-30}
}

@misc{ipstGrader,
    organization = {Thailand's Institute for the Promotion of Teaching Science and Technology},
    title = {IPST Program Grader},
    url = {https://web.archive.org/web/20191210130618/https://programming.in.th/},
    year = {2008},
    urldate = {2023-08-31}
}

@misc{codeforces,
    author = {Mike Mirzayanov},
    title = {Codeforces},
    year = {2010},
    url = {https://web.archive.org/web/20230828023358/https://codeforces.com},
    urldate = {2023-08-31}
}

@book{donovan15go,
    author = {Donovan, Alan A.A. and Kernighan, Brian W.},
    title = {The Go Programming Language},
    year = {2015},
    isbn = {0134190440},
    publisher = {Addison-Wesley Professional},
    edition = {1st},
    abstract = {The Go Programming Language is the authoritative resource for any programmer who wants to learn Go. It shows how to write clear and idiomatic Go to solve real-world problems. The book does not assume prior knowledge of Go nor experience with any specific language, so youll find it accessible whether youre most comfortable with JavaScript, Ruby, Python, Java, or C++. The first chapter is a tutorial on the basic concepts of Go, introduced through programs for file I/O and text processing, simple graphics, and web clients and servers. Early chapters cover the structural elements of Go programs: syntax, control flow, data types, and the organization of a program into packages, files, and functions. The examples illustrate many packages from the standard library and show how to create new ones of your own. Later chapters explain the package mechanism in more detail, and how to build, test, and maintain projects using the go tool. The chapters on methods and interfaces introduce Gos unconventional approach to object-oriented programming, in which methods can be declared on any type and interfaces are implicitly satisfied. They explain the key principles of encapsulation, composition, and substitutability using realistic examples. Two chapters on concurrency present in-depth approaches to this increasingly important topic. The first, which covers the basic mechanisms of goroutines and channels, illustrates the style known as communicating sequential processes for which Go is renowned. The second covers more traditional aspects of concurrency with shared variables. These chapters provide a solid foundation for programmers encountering concurrency for the first time. The final two chapters explore lower-level features of Go. One covers the art of metaprogramming using reflection. The other shows how to use the unsafe package to step outside the type system for special situations, and how to use the cgo tool to create Go bindings for C libraries. The book features hundreds of interesting and practical examples of well-written Go code that cover the whole language, its most important packages, and a wide range of applications. Each chapter has exercises to test your understanding and explore extensions and alternatives. Source code is freely available for download from http://gopl.io/ and may be conveniently fetched, built, and installed using the go get command.}
    }
}

@online{pike12godev,
    author = {Rob Pike},
    title = {Go at Google: Language Design in the Service of Software Engineering},
    url = {https://web.archive.org/web/20230821125134/https://go.dev/talks/2012/splash.article},
    year = {2012},
    urldate = {2023-08-21}
}

@proceedings{pike12go,
    author = {Pike, Rob},
    title = {Go at Google},
    year = {2012},
    isbn = {9781450315630},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2384716.2384720},
    doi = {10.1145/2384716.2384720},
    abstract = {The Go programming language was conceived in late 2007 as an answer to some of the problems we were seeing developing software infrastructure at Google. The computing landscape today is almost unrelated to the environment in which the languages being used, mostly C++, Java, and Python, had been created. The problems introduced by multicore processors, networked systems, massive computation clusters, and the web programming model were being worked around rather than addressed head-on. Moreover, the scale has changed: today's server programs comprise tens of millions of lines of code, are worked on by hundreds or even thousands of programmers, and are updated literally every day. To make matters worse, build times, even on large compilation clusters, have stretched to many minutes, even hours.Go was designed and developed to make working in this environment more productive. Besides its better-known aspects such as built-in concurrency and garbage collection, Go's design considerations include rigorous dependency management, the adaptability of software architecture as systems grow, and robustness across the boundaries between components.This talk will explain how these issues were addressed while building an efficient, compiled programming language that feels lightweight and pleasant. Examples and explanations will be taken from the real-world problems faced at Google.},
    booktitle = {Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity},
    pages = {5–6},
    numpages = {2},
    keywords = {composition, concurrency, go, programming in the large},
    location = {Tucson, Arizona, USA},
    series = {SPLASH '12},
    doi = {10.1145/2384716.2384720},
    urldate = {2023-09-06}
}


@online{golangorg,
    title = {The Go Programming Language},
    url = {https://web.archive.org/web/20230822161441/https://go.dev/doc/},
    urldate = {2023-08-22},
    year = {2009}
}

@book{flanagan20js,
    author = {Flanagan, David},
    title = {JavaScript: The Definitive Guide},
    year = {2006},
    isbn = {0596101996},
    publisher = {O'Reilly Media},
    abstract = {This Fifth Edition is completely revised and expanded to cover JavaScript as it is used in today's Web 2.0 applications. This book is both an example-driven programmer's guide and a keep-on-your-desk reference, with new chapters that explain everything you need to know to get the most out of JavaScript, including:Scripted HTTP and AjaxXML processingClient-side graphics using the canvas tagNamespaces in JavaScript--essential when writing complex programsClasses, closures, persistence, Flash, and JavaScript embedded in Java applicationsPart I explains the core JavaScript language in detail. If you are new to JavaScript, it will teach you the language. If you are already a JavaScript programmer, Part I will sharpen your skills and deepen your understanding of the language.Part II explains the scripting environment provided by web browsers, with a focus on DOM scripting with unobtrusive JavaScript. The broad and deep coverage of client-side JavaScript is illustrated with many sophisticated examples that demonstrate how to:Generate a table of contents for an HTML documentDisplay DHTML animationsAutomate form validationDraw dynamic pie chartsMake HTML elements draggableDefine keyboard shortcuts for web applicationsCreate Ajax-enabled tool tipsUse XPath and XSLT on XML documents loaded with AjaxAnd much morePart III is a complete reference for core JavaScript. It documents every class, object, constructor, method, function, property, and constant defined by JavaScript 1.5 and ECMAScript Version 3.Part IV is a reference for client-side JavaScript, covering legacy web browser APIs, the standard Level 2 DOM API, and emerging standards such as the XMLHttpRequest object and the canvas tag.More than 300,000 JavaScript programmers around the world have made this their indispensable reference book for building JavaScript applications."A must-have reference for expert JavaScript programmers...well-organized and detailed." -- Brendan Eich, creator of JavaScript},
    doi = {10.5555/1196481},
    url = {https://github.com/camoverride/lit/blob/master/Javascript-The-Definitive-Guide.pdf},
    urldate = {2023-09-07}
}

@book{crockford08js,
    author = {Crockford, Douglas},
    title = {JavaScript: The Good Parts},
    year = {2008},
    isbn = {0596517742},
    publisher = {O'Reilly Media},
    abstract = {Most programming languages contain good and bad parts, but JavaScript has more than its share of the bad, having been developed and released in a hurry before it could be refined. This authoritative book scrapes away these bad features to reveal a subset of JavaScript that's more reliable, readable, and maintainable than the language as a whole-a subset you can use to create truly extensible and efficient code. Considered the JavaScript expert by many people in the development community, author Douglas Crockford identifies the abundance of good ideas that make JavaScript an outstanding object-oriented programming language-ideas such as functions, loose typing, dynamic objects, and an expressive object literal notation. Unfortunately, these good ideas are mixed in with bad and downright awful ideas, like a programming model based on global variables. When Java applets failed, JavaScript became the language of the Web by default, making its popularity almost completely independent of its qualities as a pro gramming language. In JavaScript: The Good Parts, Crockford finally digs through the steaming pile of good intentions and blunders to give you a detailed look at all the genuinely elegant parts of JavaScript, including: Syntax Objects Functions Inheritance Arrays Regular expressions Methods Style Beautiful features The real beauty? As you move ahead with the subset of JavaScript that this book presents, you'll also sidestep the need to unlearn all the bad parts. Of course, if you want to find out more about the bad parts and how to use them badly, simply consult any other JavaScript book. With JavaScript: The Good Parts, you'll discover a beautiful, elegant, lightweight and highlyexpressive language that lets you create effective code, whether you're managing object libraries or just trying to get Ajax to run fast. If you develop sites or applications for the Web, this book is an absolute must.},
    doi = {10.5555/1386753},
    url = {https://andersonguelphjs.github.io/OReilly_JavaScript_The_Good_Parts_May_2008.pdf},
    urldate = {2023-09-07}
}

% author = {A. Hejlsberg and S. Lucco and L. Hoban},
@online{hejlsbergts,
    title = {TypeScript for JavaScript Programmers},
    organization = {Microsoft},
    url = {https://web.archive.org/web/20230724080843/https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html},
    year = {2017},
    urldate = {2023-08-21}
}

@book{cherny19ts,
    title = {Programming TypeScript: Making Your JavaScript Applications Scale},
    author = {Cherny, Boris},
    isbn = {9781492037620},
    url = {https://books.google.co.th/books?id=Y-mUDwAAQBAJ},
    year = {2019},
    publisher = {O'Reilly Media},
    urldate = {2023-08-22}
}

@online{microsoftts,
    organization = {Microsoft},
    title = {TypeScript},
    url = {https://web.archive.org/web/20230822010419/https://www.typescriptlang.org/},
    year = {2012},
    urldate = {2023-08-22}
}

@online{gofiber,
    organization = {GoFiber},
    title = {What is Fiber?},
    year = {2023},
    url = {https://web.archive.org/web/20231004091020/https://docs.gofiber.io/},
    urldate = {2023-10-04}
}

@online{malomo20fiber,
    author = {Demola Malomo},
    title = {Build a REST API with Golang and MongoDB - Fiber Version},
    year = {2022},
    url = {https://web.archive.org/web/20231202084855/https://dev.to/hackmamba/build-a-rest-api-with-golang-and-mongodb-fiber-version-4la0},
    urldate = {2023-12-02}
}

%% LOST MEDIA
% online{chouhan21fiber,
%    author = {A. Chouhan},
%    title = {Go vs GoFiber: Exploring New Ways of Writing REST APIs},
%    year = {2022},
%    url = {https://medium.com/ankitachouhan10121992/go-vs-gofiber-exploring-new-ways-of-writing-rest-apis-7f1285d2cd00}, 
% }

@online{grafana,
    organization = {Grafana Labs},
    title = {What is Grafana?},
    year = {2020},
    url = {https://web.archive.org/web/20230802123035/https://grafana.com/docs/grafana/latest/introduction/},
    urldate = {2023-09-02}
}

%% LOST MEDIA
%misc{carr21grafana,
%    author = {Carr, D.},
%    title = {Grafana Tutorial: Learn Grafana \& Create Dashboards},
%    year = {2021},
%    url = {https://www.guru99.com/grafana-tutorial.html},
%    note = {Available on Guru99: https://www.guru99.com/grafana-tutorial.html}
%}

%misc{patel20grafana,
%    author = {Patel, N.},
%    title = {How to Use Grafana for Performance Monitoring},
%    year = {2020},
%    url = {https://www.bmc.com/blogs/grafana-performance-monitoring/},
%    note = {Available on BMC blogs: https://www.bmc.com/blogs/grafana-performance-monitoring/}
%}

@article{sunil21grafana,
  title = {A Comprehensive Study on Data Visualization Tool - Grafana},
  author = {Kumar, S. and Saravanan, C.},
  journal = {International Journal of Emerging Technologies and Innovative Research},
  year = {2021},
  volume = {8},
  issue = {5},
  pages = {f908-f914},
  url = {http://www.jetir.org/papers/JETIR2105788.pdf},
  isbn = {2349-5162},
}

@online{github,
    organization = {GitHub},
    title = {About GitHub},
    year = {2010},
    url = {http://web.archive.org/web/20230821043926/https://github.com/about},
    urldate = {2023-08-21}
}

%% LOST MEDIA
%misc{gupta21github,
%    author = {Gupta, N.},
%    title = {Introduction to GitHub},
%    year = {2021},
%    url = {https://www.guru99.com/introduction-to-github.html},
%    note = {Available on Guru99: https://www.guru99.com/introduction-to-github.html}
%}

@online{githubprice,
    organization = {GitHub},
    title = {GitHub Pricing},
    year = {2010},
    url = {https://github.com/pricing},
    urldate = {2023-08-21}
}

@online{docker,
    organization = {Docker},
    title = {What is Docker?},
    year = {2015},
    url = {https://www.docker.com/what-docker},
    urldate = {2023-08-22}
}

@online{yıldız23docker,
    author = {Hatice Yıldız},
    title = {Docker Containerization and Virtualization},
    year = {2023},
    url = {https://medium.com/@haticeyildiz/docker-containerization-and-virtualization-benefits-advantages-and-disadvantages-737b31b86213},
    urldate = {2023-08-22}
}

@online{chesterwood21microservice,
    author = {Richard Chesterwood},
    title = {What Are Microservices? Pros, Cons, and How to Build Them},
    year = {2021},
    url = {https://web.archive.org/web/20230915134217/https://blog.udemy.com/what-are-microservices/},
    urldate = {2023-09-15}
}

@online{dockerdoc,
    organization = {Docker},
    title = {Docker Documentation},
    year = {2015},
    url = {https://web.archive.org/web/20240626183058/https://docs.docker.com/guides/docker-overview/},
    urldate = {2024-06-26}
}

@online{kubemed20,
    author = {Tinnapat Chaopanya},
    title = {Docker และ Kubernetes คืออะไร ทำไมคนถึงพูดกันเยอะจังนะ Part 1},
    year = {2020},
    url = {https://medium.com/kbtg-life/docker-docker-และ-kubernetes-คืออะไร-ทำไมคนถึงพูดกันเยอะจังนะ-part-1-fe318ba5b36},
    urldate = {2023-09-05}
}

@online{terraform,
    organization = {Terraform},
    title = {What is Terraform?},
    year = {2022},
    url = {https://web.archive.org/web/20230925214943/https://developer.hashicorp.com/terraform/intro},
    urldate = {2023-09-25}
}

@online{tripathi23terraform,
    author = {Pragyan Tripathi} ,
    title = {5 Benefits of using Terraform},
    url = {https://web.archive.org/web/20231205061001/https://dev.to/pragyanatvade/5-benefits-of-using-terraform-4foo},
    year = {2023},
    urldate = {2023-12-05}
}

@online{stanfield22iac,
    author = {Stanfield, E.},
    title = {What Is Infrastructure as Code (IaC)?},
    year = {2019},
    url = {https://web.archive.org/web/20231201194234/https://www.sumologic.com/glossary/infrastructure-as-code/},
    urldate = {2023-12-01}
}

@online{kubernetes,
    prganization = {Kubernetes},
    title = {What is Kubernetes?},
    year = {2017},
    url = {https://web.archive.org/web/20230817152138/https://kubernetes.io/docs/concepts/overview/},
    urldate = {2023-08-17}
}

@online{mysql,
    organization = {MySQL},
    title = {What is MySQL?},
    year = {2016},
    url = {https://dev.mysql.com/doc/mysql-getting-started/en/},
    urldate = {2023-08-26}
}

@online{mysqlcomm,
    organization = {MySQL},
    title = {MySQL Community Edition},
    year = {2010},
    url = {https://www.mysql.com/products/community/},
}

@online{prometheus,
    organization = {Prometheus},
    title = {Introduction},
    year = {2015},
    url = {https://prometheus.io/docs/introduction/overview/},
}

@online{influxdb,
    organization = {InfluxData},
    title = {What is InfluxDB?},
    year = {2020},
    url = {https://www.influxdata.com/products/influxdb/},
}

@online{influxdb-platforms,
    organization = {InfluxData},
    title = {InfluxDB Supported Platforms},
    year = {2020},
    url = {https://docs.influxdata.com/influxdb/v2.0/reference/supported-platforms/},
}

@online{rabbitmq,
    organization = {RabbitMQ},
    title = {What is RabbitMQ?},
    year = {2007},
    url = {https://www.rabbitmq.com/},
}

@book{roy17rabbitmq,
  author = {Roy, G. M.},
  title = {RabbitMQ in Depth},
  publisher = {Manning Publications},
  year = {2017}
}

@book{hanwell17rabbitmq,
  author = {Hanwell, S. D.},
  title = {RabbitMQ: Patterns for Applications},
  publisher = {O'Reilly Media},
  year = {2017}
}

@article{johnson88classobj,
    author = {Johnson, R. and Foote, B.},
    year = {1988},
    month = {06},
    pages = {22-35},
    title = {Designing Reusable Classes},
    volume = {1},
    journal = {Journal of Object-Oriented Programming}
}

@online{javapolymorph,
    organization = {Oracle},
    year = {2011},
    title = {Java Documentation: Polymorphism},
    url = {https://docs.oracle.com/javase/tutorial/java/IandI/polymorphism.html},
}

@online{sakpal18inheritance,
    author = {Sakpal, T.},
    year = {2018},
    title = {Inheritance in Java \& Types of Inheritance},
    url = {https://simplesnippets.tech/inheritance-in-java-types-of-inheritance/},
}

@book{stroustrup94inheritance,
    author = {Stroustrup, B.},
    title = {The Design and Evolution of C++},
    year = {1995},
    isbn = {0201543303},
    publisher = {ACM Press/Addison-Wesley Publishing Co.},
    address = {USA}
}

@inproceedings{liskov87abstaction,
    author       = {Babara Liskov},
    editor       = {Leigh R. Power and
                  Zvi Weiss},
    title        = {Keynote Address - Data Abstraction and Hierarchy},
    booktitle    = {Addendum to the Proceedings on Object-Oriented Programming Systems,
                  Languages and Applications, {OOPSLA} 1987 Addendum, Orlando, Florida,
                  USA, October 4-8, 1987},
    pages        = {17--34},
    publisher    = {{ACM}},
    year         = {1987},
    url          = {https://doi.org/10.1145/62138.62141},
    doi          = {10.1145/62138.62141},
    timestamp    = {Tue, 16 Aug 2022 23:04:38 +0200},
    biburl       = {https://dblp.org/rec/conf/oopsla/Liskov87.bib},
    bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@online{saladpukabstract,
    organization = {Saladpuk},
    title = {Abstraction},
    url = {https://www.saladpuk.com/beginner-1/oop/abstraction},
    year = {2020},
}

@article{nzeruekenneth23polymorph,
    author = {Nzerue-Kenneth Peace Ezinne and Onu Fergus Uchenna and Denis Ashishie Undiukeye and Igwe Joseph Sunday and Ogbu Nwani Henry},
    year = {2023},
    month = {11},
    pages = {83-93},
    title = {Detailed Study of the Object-Oriented Programming (OOP) Features in Python},
    volume = {6},
    journal = {British Journal of Computer, Networking and Information Technology},
    doi = {10.52589/BJCNIT-FACSOJAO}
}

@online{ntu20polymorph,
    author = {Hock Chuan, C.},
    title = {Java Programming Tutorial: OOP - Composition, Inheritance \& Polymorphism},
    year = {2020},
    url = {https://www3.ntu.edu.sg/home/ehchua/programming/java/J3b_OOPInheritancePolymorphism.html}
}

%% WITH IMAGES
@online{grafanaoss,
    organization = {Grafana Labs},
    title = {Grafana OSS - Visualize your data, optimize your performance},
    year = {2020},
    url = {https://web.archive.org/web/20230515000000*/https://grafana.com/oss/grafana/},
    urldate = {2023-09-02}
}

@online{dockerdummies,
    url = {https://medium.com/@SaadAAkash/docker-for-dummies-literally-ab3fc6362d5f},
    urldate = {2023-08-22},
    author = {Saad A. Akash},
    year = {2018},
    title = {Docker for Dummies, Literally}
}

@online{reactcycles,
    url = {https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/},
    author = {Wojciech Maj},
    year = {2018},
    urldate = {2023-09-07},
    title = {React Lifecycle Methods Diagram}    
}

@online{apollo22oop,
    organization = {Apollo Tech},
    title = {Why Object-oriented Programming Matters?},
    year = {2022},
    url = {https://web.archive.org/web/20240428203725/https://www.apollotechnical.com/why-object-oriented-programming-matters/},
    urldate = {2024-04-28}
}

@online{moses22obj,
    author = {Moses Gamio},
    title = {Understanding Object-Oriented Programming Concepts},
    year = {2022},
    url = {https://blog.aigents.co/understanding-object-oriented-programming-concepts-4ddcc0eb3c96},
    urldate = {2024-04-25}
}

@online{raut22encapsule,
    author = {Akshay Raut},
    year = {2022},
    title = {Encapsulation in Object Oriented Programming},
    url = {https://akshayraut.medium.com/encapsulation-in-object-oriented-programming-4cfb0ee28f12},
    urldate = {2024-04-20}
}

@online{nishad22encapsulation,
    author = {Ankit Nishad},
    year = {2022},
    title = {What is Encapsulation in OOPS?},
    url = {https://web.archive.org/web/20240430042054/https://www.enjoyalgorithms.com/blog/encapsulation-in-oops},
    urldate = {2024-04-30}
}

@online{rawat22versionctl,
    author = {Ashok Rawat},
    year = {2022},
    title = {What is a version control system?},
    url = {https://blog.stackademic.com/what-is-a-version-control-system-2f3509066b72},
    urldate = {2024-04-20}
}